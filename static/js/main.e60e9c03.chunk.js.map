{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","step","frameSize","itemWidth","animationDuration","infinite","position","disabledNext","disabledPrev","changeStepValue","event","setState","target","value","updateButtonState","changeFrameSizeValue","changeItemWidthValue","changeAnimationDurationValue","changeInfiniteValue","minX","props","images","length","nextButtonHandler","maxShift","shift","currentShift","setInfinite","prevtButtonHandler","this","className","style","width","map","image","index","src","alt","height","transform","transition","type","disabled","onClick","htmlFor","id","min","max","onChange","checked","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"uPAkBaA,EAAb,4MACEC,MAAQ,CACNC,KAAM,EACNC,UAAW,EACXC,UAAW,IACXC,kBAAmB,IACnBC,UAAU,EACVC,SAAU,EACVC,cAAc,EACdC,cAAc,GATlB,EAYEC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CAAEV,MAAOS,EAAME,OAAOC,QACpC,EAAKC,qBAdT,EAiBEC,qBAAuB,SAACL,GACtB,EAAKC,SAAS,CAAET,WAAYQ,EAAME,OAAOC,QACzC,EAAKC,qBAnBT,EAsBEE,qBAAuB,SAACN,GACtB,EAAKC,SAAS,CAAER,WAAYO,EAAME,OAAOC,QACzC,EAAKC,qBAxBT,EA2BEG,6BAA+B,SAACP,GAC9B,EAAKC,SAAS,CAAEP,mBAAoBM,EAAME,OAAOC,SA5BrD,EA+BEK,oBAAsB,WACpB,EAAKP,UAAS,SAACX,GAAD,MAAY,CACxBK,UAAWL,EAAMK,cAjCvB,EAqCES,kBAAoB,WAClB,IAAMK,GAAQ,EAAKC,MAAMC,OAAOC,OAAS,EAAKtB,MAAME,WAAa,EAAKF,MAAMG,WAAa,EAGzF,EAAKQ,UAAS,SAACX,GAAD,MAAY,CACxBO,eAAgBP,EAAMM,SAAWa,GACjCX,eAAgBR,EAAMM,SAJX,QAvCjB,EA+CEiB,kBAAoB,WAClB,IAAMC,GAAY,EAAKJ,MAAMC,OAAOC,OAAS,EAAKtB,MAAME,WAAa,EAAKF,MAAMG,WAAa,EACvFsB,EAAQ,EAAKzB,MAAMG,UAAY,EAAKH,MAAMC,MAAQ,EAClDyB,EAAe,EAAK1B,MAAMM,SAAWmB,EAEvCC,EAAeF,EACjB,EAAKb,UAAS,iBAAO,CACnBL,SAAUkB,MAGZ,EAAKb,SAAS,CACZL,SAAUoB,IAIV,EAAK1B,MAAMK,SACb,EAAKsB,cAEL,EAAKb,qBAjEX,EAqEEc,mBAAqB,WACnB,IAAMH,EAAQ,EAAKzB,MAAMG,UAAY,EAAKH,MAAMC,KAC3B,EAAKD,MAAMM,SAAWmB,EAExB,EACjB,EAAKd,UAAS,SAACX,GAAD,MAAY,CACxBM,SAAUN,EAAMM,SAAWN,EAAMM,aAGnC,EAAKK,UAAS,SAACX,GAAD,MAAY,CACxBM,SAAUN,EAAMM,SAAWmB,MAI3B,EAAKzB,MAAMK,SACb,EAAKsB,cAEL,EAAKb,qBAtFX,EA0FEa,YAAc,WACZ,IAAMR,GAAQ,EAAKC,MAAMC,OAAOC,OAAS,EAAKtB,MAAME,WAAa,EAAKF,MAAMG,WAAa,EAGrF,EAAKH,MAAMM,WAAaa,GAC1B,EAAKR,SAAS,CACZL,SAJS,EAKTC,cAAc,IALL,IAST,EAAKP,MAAMM,UACb,EAAKK,SAAS,CACZL,SAAUa,EACVX,cAAc,KAxGtB,4CA6GE,WACE,MASIqB,KAAK7B,MARPC,EADF,EACEA,KACAC,EAFF,EAEEA,UACAC,EAHF,EAGEA,UACAC,EAJF,EAIEA,kBACAC,EALF,EAKEA,SACAC,EANF,EAMEA,SACAC,EAPF,EAOEA,aACAC,EARF,EAQEA,aAGF,OACE,sBACEsB,UAAU,WADZ,UAGE,oBACEA,UAAU,iBACVC,MAAO,CACLC,MAAO9B,EAAYC,GAHvB,SAMG0B,KAAKT,MAAMC,OAAOY,KAAI,SAACC,EAAOC,GAC7B,OACE,oBAEEL,UAAU,iBAFZ,SAIE,qBACEM,IAAKF,EACLG,IAAG,UAAKF,EAAQ,GAChBJ,MAAO,CACLC,MAAO7B,EACPmC,OAAQnC,EACRoC,UAAU,cAAD,OAAgBjC,EAAhB,OACTkC,WAAW,GAAD,OAAKpC,EAAL,WAVR+B,QAkBd,sBAAKL,UAAU,oBAAf,UACE,wBACEW,KAAK,SACLX,UAAU,mBACVY,SAAUlC,EACVmC,QAASd,KAAKD,mBAJhB,kBASA,wBACEa,KAAK,SACLX,UAAU,mBACVY,SAAUnC,EACVoC,QAASd,KAAKN,kBAJhB,qBAUF,sBAAKO,UAAU,sBAAf,UACE,wBACEc,QAAQ,OACRd,UAAU,kBAFZ,UAIE,yCACA,uBACEe,GAAG,OACHJ,KAAK,QACL5B,MAAOZ,EACP6C,IAAK,EACLC,IAAK,GACLC,SAAUnB,KAAKpB,qBAInB,wBACEmC,QAAQ,YACRd,UAAU,kBAFZ,UAIE,+CACA,uBACEe,GAAG,YACHJ,KAAK,QACL5B,MAAOX,EACP4C,IAAK,EACLC,IAAK,GACLC,SAAUnB,KAAKd,0BAInB,wBACE6B,QAAQ,YACRd,UAAU,kBAFZ,UAIE,+CACA,uBACEe,GAAG,YACHJ,KAAK,QACL5B,MAAOV,EACP2C,IAAK,GACLC,IAAK,IACLC,SAAUnB,KAAKb,0BAInB,wBACE4B,QAAQ,oBACRd,UAAU,kBAFZ,UAIE,uDACA,uBACEe,GAAG,oBACHJ,KAAK,QACL5B,MAAOT,EACP0C,IAAK,IACLC,IAAK,IACLC,SAAUnB,KAAKZ,kCAInB,wBACE2B,QAAQ,WACRd,UAAU,kBAFZ,UAIE,6CACA,uBACEe,GAAG,WACHJ,KAAK,WACLQ,QAAS5C,EACT2C,SAAUnB,KAAKX,mCAlP7B,GAA8BgC,IAAMC,WCV9BC,E,4MACJpD,MAAQ,CACNqB,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iB,4CAIJ,WACE,IAAQA,EAAWQ,KAAK7B,MAAhBqB,OAER,OACE,sBAAKS,UAAU,MAAf,UAEE,gDAAmBT,EAAOC,OAA1B,aACA,cAAC,EAAD,CAAUD,OAAQA,W,GAvBR6B,IAAMC,WA6BTC,IClCfC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e60e9c03.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n};\n\ntype State = {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  position: number;\n  disabledNext: boolean,\n  disabledPrev: boolean,\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    position: 0,\n    disabledNext: false,\n    disabledPrev: true,\n  };\n\n  changeStepValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ step: +event.target.value });\n    this.updateButtonState();\n  };\n\n  changeFrameSizeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ frameSize: +event.target.value });\n    this.updateButtonState();\n  };\n\n  changeItemWidthValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemWidth: +event.target.value });\n    this.updateButtonState();\n  };\n\n  changeAnimationDurationValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ animationDuration: +event.target.value });\n  };\n\n  changeInfiniteValue = () => {\n    this.setState((state) => ({\n      infinite: !state.infinite,\n    }));\n  };\n\n  updateButtonState = () => {\n    const minX = (this.props.images.length - this.state.frameSize) * this.state.itemWidth * -1;\n    const maxX = 0;\n\n    this.setState((state) => ({\n      disabledNext: !(state.position > minX),\n      disabledPrev: !(state.position < maxX),\n    }));\n  };\n\n  nextButtonHandler = () => {\n    const maxShift = (this.props.images.length - this.state.frameSize) * this.state.itemWidth * -1;\n    const shift = this.state.itemWidth * this.state.step * -1;\n    const currentShift = this.state.position + shift;\n\n    if (currentShift < maxShift) {\n      this.setState(() => ({\n        position: maxShift,\n      }));\n    } else {\n      this.setState({\n        position: currentShift,\n      });\n    }\n\n    if (this.state.infinite) {\n      this.setInfinite();\n    } else {\n      this.updateButtonState();\n    }\n  };\n\n  prevtButtonHandler = () => {\n    const shift = this.state.itemWidth * this.state.step;\n    const currentShift = this.state.position + shift;\n\n    if (currentShift > 0) {\n      this.setState((state) => ({\n        position: state.position - state.position,\n      }));\n    } else {\n      this.setState((state) => ({\n        position: state.position + shift,\n      }));\n    }\n\n    if (this.state.infinite) {\n      this.setInfinite();\n    } else {\n      this.updateButtonState();\n    }\n  };\n\n  setInfinite = () => {\n    const minX = (this.props.images.length - this.state.frameSize) * this.state.itemWidth * -1;\n    const maxX = 0;\n\n    if (this.state.position === minX) {\n      this.setState({\n        position: maxX,\n        disabledNext: false,\n      });\n    }\n\n    if (this.state.position === maxX) {\n      this.setState({\n        position: minX,\n        disabledPrev: false,\n      });\n    }\n  };\n\n  render() {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n      position,\n      disabledNext,\n      disabledPrev,\n    } = this.state;\n\n    return (\n      <div\n        className=\"Carousel\"\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: frameSize * itemWidth,\n          }}\n        >\n          {this.props.images.map((image, index) => {\n            return (\n              <li\n                key={+index}\n                className=\"Carousel__item\"\n              >\n                <img\n                  src={image}\n                  alt={`${index + 1}`}\n                  style={{\n                    width: itemWidth,\n                    height: itemWidth,\n                    transform: `translateX(${position}px)`,\n                    transition: `${animationDuration}ms`,\n                  }}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            disabled={disabledPrev}\n            onClick={this.prevtButtonHandler}\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            disabled={disabledNext}\n            onClick={this.nextButtonHandler}\n          >\n            Next\n          </button>\n        </div>\n\n        <div className=\"Carousel__label-box\">\n          <label\n            htmlFor=\"step\"\n            className=\"Carousel__label\"\n          >\n            <span>Step:</span>\n            <input\n              id=\"step\"\n              type=\"range\"\n              value={step}\n              min={1}\n              max={10}\n              onChange={this.changeStepValue}\n            />\n          </label>\n\n          <label\n            htmlFor=\"frameSize\"\n            className=\"Carousel__label\"\n          >\n            <span>Frame Size:</span>\n            <input\n              id=\"frameSize\"\n              type=\"range\"\n              value={frameSize}\n              min={1}\n              max={10}\n              onChange={this.changeFrameSizeValue}\n            />\n          </label>\n\n          <label\n            htmlFor=\"itemWidth\"\n            className=\"Carousel__label\"\n          >\n            <span>Item Width:</span>\n            <input\n              id=\"itemWidth\"\n              type=\"range\"\n              value={itemWidth}\n              min={50}\n              max={300}\n              onChange={this.changeItemWidthValue}\n            />\n          </label>\n\n          <label\n            htmlFor=\"animationDuration\"\n            className=\"Carousel__label\"\n          >\n            <span>Animation Duration:</span>\n            <input\n              id=\"animationDuration\"\n              type=\"range\"\n              value={animationDuration}\n              min={500}\n              max={5000}\n              onChange={this.changeAnimationDurationValue}\n            />\n          </label>\n\n          <label\n            htmlFor=\"infinite\"\n            className=\"Carousel__label\"\n          >\n            <span>Infinite:</span>\n            <input\n              id=\"infinite\"\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={this.changeInfiniteValue}\n            />\n          </label>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n        <Carousel images={images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}